
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000e88  08000e88  00001e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ec8  08000ec8  00002050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ec8  08000ec8  00001ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ed0  08000ed0  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed0  08000ed0  00001ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ed4  08000ed4  00001ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000ed8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002050  2**0
                  CONTENTS
 10 .bss          0000016c  20000050  20000050  00002050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00002050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000389  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000243  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00002650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000065  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f0a  00000000  00000000  0000274d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cab  00000000  00000000  00004657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007f52  00000000  00000000  00005302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006a0  00000000  00000000  0000d298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0000d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000050 	.word	0x20000050
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08000e70 	.word	0x08000e70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000054 	.word	0x20000054
 80001ec:	08000e70 	.word	0x08000e70

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <USART1_Write>:
#define ADC1_SMPR2    (*(volatile uint32_t*)(ADC1_B + 0x10))
#define ADC1_SQR3     (*(volatile uint32_t*)(ADC1_B + 0x34))
#define ADC1_DR       (*(volatile uint32_t*)(ADC1_B + 0x4C))

// Utility function: Send a byte via UART1
void USART1_Write(uint8_t ch) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
    while (!(USART1_SR & (1 << 7)));  // Wait until TXE = 1
 800029a:	bf00      	nop
 800029c:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <USART1_Write+0x2c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f9      	beq.n	800029c <USART1_Write+0xc>
    USART1_DR = ch;
 80002a8:	4a05      	ldr	r2, [pc, #20]	@ (80002c0 <USART1_Write+0x30>)
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40011000 	.word	0x40011000
 80002c0:	40011004 	.word	0x40011004

080002c4 <USART1_Print>:

// Print a string via UART1
void USART1_Print(char *str) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002cc:	e006      	b.n	80002dc <USART1_Print+0x18>
        USART1_Write(*str++);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ffda 	bl	8000290 <USART1_Write>
    while (*str) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f4      	bne.n	80002ce <USART1_Print+0xa>
    }
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <UART1_Init>:
    USART1_Write(ch);
    return ch;
}

// Initialize UART1 @ 9600 baud
void UART1_Init(void) {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
    RCC_APB2EN |= (1 << 4);      // Enable USART1 clock
 80002f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000360 <UART1_Init+0x70>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a19      	ldr	r2, [pc, #100]	@ (8000360 <UART1_Init+0x70>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6013      	str	r3, [r2, #0]
    RCC_AHB1EN |= (1 << 0);      // Enable GPIOA clock
 8000300:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <UART1_Init+0x74>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a17      	ldr	r2, [pc, #92]	@ (8000364 <UART1_Init+0x74>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]

    // Configure PA9 as Alternate Function (USART1_TX)
    GPIOA_MODER &= ~(3 << (9 * 2));
 800030c:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <UART1_Init+0x78>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a15      	ldr	r2, [pc, #84]	@ (8000368 <UART1_Init+0x78>)
 8000312:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000316:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (2 << (9 * 2));      // AF mode
 8000318:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <UART1_Init+0x78>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a12      	ldr	r2, [pc, #72]	@ (8000368 <UART1_Init+0x78>)
 800031e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000322:	6013      	str	r3, [r2, #0]
    GPIOA_AFRH &= ~(0xF << ((9 - 8) * 4));
 8000324:	4b11      	ldr	r3, [pc, #68]	@ (800036c <UART1_Init+0x7c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a10      	ldr	r2, [pc, #64]	@ (800036c <UART1_Init+0x7c>)
 800032a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800032e:	6013      	str	r3, [r2, #0]
    GPIOA_AFRH |=  (0x7 << ((9 - 8) * 4)); // AF7 for USART1
 8000330:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <UART1_Init+0x7c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <UART1_Init+0x7c>)
 8000336:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800033a:	6013      	str	r3, [r2, #0]

    // Baud rate for 16 MHz PCLK, 9600 baud
    USART1_BRR = 0x0683;  // Mantissa and fraction
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <UART1_Init+0x80>)
 800033e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000342:	601a      	str	r2, [r3, #0]

    // Enable USART, Transmitter
    USART1_CR1 |= (1 << 13) | (1 << 3);
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <UART1_Init+0x84>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <UART1_Init+0x84>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023844 	.word	0x40023844
 8000364:	40023830 	.word	0x40023830
 8000368:	40020000 	.word	0x40020000
 800036c:	40020024 	.word	0x40020024
 8000370:	40011008 	.word	0x40011008
 8000374:	4001100c 	.word	0x4001100c

08000378 <ADC_Init_Chan2>:

void ADC_Init_Chan2(void) {
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
    // Enable clock to GPIOA and ADC1 Clock
    RCC_AHB1EN |= (1 << 0); // GPIOA clock
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <ADC_Init_Chan2+0x74>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a1a      	ldr	r2, [pc, #104]	@ (80003ec <ADC_Init_Chan2+0x74>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6013      	str	r3, [r2, #0]
    RCC_APB2EN |= (1 << 8); // ADC1 clock
 8000388:	4b19      	ldr	r3, [pc, #100]	@ (80003f0 <ADC_Init_Chan2+0x78>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a18      	ldr	r2, [pc, #96]	@ (80003f0 <ADC_Init_Chan2+0x78>)
 800038e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000392:	6013      	str	r3, [r2, #0]

    // Configure PA2 for Analog Mode
    GPIOA_MODER &= ~(3 << (2 * 2));
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <ADC_Init_Chan2+0x7c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <ADC_Init_Chan2+0x7c>)
 800039a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800039e:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (3 << (2 * 2)); // Analog mode
 80003a0:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <ADC_Init_Chan2+0x7c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a13      	ldr	r2, [pc, #76]	@ (80003f4 <ADC_Init_Chan2+0x7c>)
 80003a6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003aa:	6013      	str	r3, [r2, #0]

    // Set the Sampling Time for channel 2
    ADC1_SMPR2 |= (0x7 << 6); // Max sampling time
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <ADC_Init_Chan2+0x80>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a11      	ldr	r2, [pc, #68]	@ (80003f8 <ADC_Init_Chan2+0x80>)
 80003b2:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 80003b6:	6013      	str	r3, [r2, #0]

    // Configure ADC regular sequence register channel 2
    ADC1_SQR3 = 2;
 80003b8:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <ADC_Init_Chan2+0x84>)
 80003ba:	2202      	movs	r2, #2
 80003bc:	601a      	str	r2, [r3, #0]

    // Continuous Conversion mode
    ADC1_CR2 |= (1 << 1);
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <ADC_Init_Chan2+0x88>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000400 <ADC_Init_Chan2+0x88>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	6013      	str	r3, [r2, #0]

    // Enable ADC
    ADC1_CR2 |= (1 << 0);
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <ADC_Init_Chan2+0x88>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000400 <ADC_Init_Chan2+0x88>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6013      	str	r3, [r2, #0]

    // Start ADC Conversion
    ADC1_CR2 |= (1 << 30);
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <ADC_Init_Chan2+0x88>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a09      	ldr	r2, [pc, #36]	@ (8000400 <ADC_Init_Chan2+0x88>)
 80003dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003e0:	6013      	str	r3, [r2, #0]
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40023830 	.word	0x40023830
 80003f0:	40023844 	.word	0x40023844
 80003f4:	40020000 	.word	0x40020000
 80003f8:	40012010 	.word	0x40012010
 80003fc:	40012034 	.word	0x40012034
 8000400:	40012008 	.word	0x40012008

08000404 <ADC1_Read>:

unsigned int ADC1_Read(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
    while (!(ADC1_SR & (1 << 1))); // Wait for EOC
 8000408:	bf00      	nop
 800040a:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <ADC1_Read+0x20>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0f9      	beq.n	800040a <ADC1_Read+0x6>
    return ADC1_DR;                // Read ADC value
 8000416:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <ADC1_Read+0x24>)
 8000418:	681b      	ldr	r3, [r3, #0]
}
 800041a:	4618      	mov	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40012000 	.word	0x40012000
 8000428:	4001204c 	.word	0x4001204c

0800042c <main>:

int main(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b092      	sub	sp, #72	@ 0x48
 8000430:	af00      	add	r7, sp, #0
    char buffer[64];

    UART1_Init();
 8000432:	f7ff ff5d 	bl	80002f0 <UART1_Init>
    ADC_Init_Chan2();
 8000436:	f7ff ff9f 	bl	8000378 <ADC_Init_Chan2>

    while (1) {
        ADC_Val = ADC1_Read();
 800043a:	f7ff ffe3 	bl	8000404 <ADC1_Read>
 800043e:	4603      	mov	r3, r0
 8000440:	4a0c      	ldr	r2, [pc, #48]	@ (8000474 <main+0x48>)
 8000442:	6013      	str	r3, [r2, #0]
        sprintf(buffer, "ADC : %d \r\n", ADC_Val);
 8000444:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <main+0x48>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	490a      	ldr	r1, [pc, #40]	@ (8000478 <main+0x4c>)
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f876 	bl	8000540 <siprintf>
        USART1_Print(buffer);
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff33 	bl	80002c4 <USART1_Print>
        for (volatile int i = 0; i < 1000000; i++); // crude delay
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	e002      	b.n	800046a <main+0x3e>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3301      	adds	r3, #1
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a03      	ldr	r2, [pc, #12]	@ (800047c <main+0x50>)
 800046e:	4293      	cmp	r3, r2
 8000470:	ddf8      	ble.n	8000464 <main+0x38>
        ADC_Val = ADC1_Read();
 8000472:	e7e2      	b.n	800043a <main+0xe>
 8000474:	2000006c 	.word	0x2000006c
 8000478:	08000e88 	.word	0x08000e88
 800047c:	000f423f 	.word	0x000f423f

08000480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000488:	4a14      	ldr	r2, [pc, #80]	@ (80004dc <_sbrk+0x5c>)
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <_sbrk+0x60>)
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000494:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <_sbrk+0x64>)
 800049e:	4a12      	ldr	r2, [pc, #72]	@ (80004e8 <_sbrk+0x68>)
 80004a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004a2:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <_sbrk+0x64>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d207      	bcs.n	80004c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b0:	f000 f868 	bl	8000584 <__errno>
 80004b4:	4603      	mov	r3, r0
 80004b6:	220c      	movs	r2, #12
 80004b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	e009      	b.n	80004d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c6:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <_sbrk+0x64>)
 80004d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20030000 	.word	0x20030000
 80004e0:	00000400 	.word	0x00000400
 80004e4:	20000070 	.word	0x20000070
 80004e8:	200001c0 	.word	0x200001c0

080004ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ec:	480d      	ldr	r0, [pc, #52]	@ (8000524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	@ (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	@ (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051a:	f000 f839 	bl	8000590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff ff85 	bl	800042c <main>

08000522 <LoopForever>:

LoopForever:
  b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   r0, =_estack
 8000524:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000530:	08000ed8 	.word	0x08000ed8
  ldr r2, =_sbss
 8000534:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000538:	200001bc 	.word	0x200001bc

0800053c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC_IRQHandler>
	...

08000540 <siprintf>:
 8000540:	b40e      	push	{r1, r2, r3}
 8000542:	b510      	push	{r4, lr}
 8000544:	b09d      	sub	sp, #116	@ 0x74
 8000546:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000548:	9002      	str	r0, [sp, #8]
 800054a:	9006      	str	r0, [sp, #24]
 800054c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000550:	480a      	ldr	r0, [pc, #40]	@ (800057c <siprintf+0x3c>)
 8000552:	9107      	str	r1, [sp, #28]
 8000554:	9104      	str	r1, [sp, #16]
 8000556:	490a      	ldr	r1, [pc, #40]	@ (8000580 <siprintf+0x40>)
 8000558:	f853 2b04 	ldr.w	r2, [r3], #4
 800055c:	9105      	str	r1, [sp, #20]
 800055e:	2400      	movs	r4, #0
 8000560:	a902      	add	r1, sp, #8
 8000562:	6800      	ldr	r0, [r0, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000568:	f000 f98c 	bl	8000884 <_svfiprintf_r>
 800056c:	9b02      	ldr	r3, [sp, #8]
 800056e:	701c      	strb	r4, [r3, #0]
 8000570:	b01d      	add	sp, #116	@ 0x74
 8000572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000576:	b003      	add	sp, #12
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000
 8000580:	ffff0208 	.word	0xffff0208

08000584 <__errno>:
 8000584:	4b01      	ldr	r3, [pc, #4]	@ (800058c <__errno+0x8>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <__libc_init_array>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	4d0d      	ldr	r5, [pc, #52]	@ (80005c8 <__libc_init_array+0x38>)
 8000594:	4c0d      	ldr	r4, [pc, #52]	@ (80005cc <__libc_init_array+0x3c>)
 8000596:	1b64      	subs	r4, r4, r5
 8000598:	10a4      	asrs	r4, r4, #2
 800059a:	2600      	movs	r6, #0
 800059c:	42a6      	cmp	r6, r4
 800059e:	d109      	bne.n	80005b4 <__libc_init_array+0x24>
 80005a0:	4d0b      	ldr	r5, [pc, #44]	@ (80005d0 <__libc_init_array+0x40>)
 80005a2:	4c0c      	ldr	r4, [pc, #48]	@ (80005d4 <__libc_init_array+0x44>)
 80005a4:	f000 fc64 	bl	8000e70 <_init>
 80005a8:	1b64      	subs	r4, r4, r5
 80005aa:	10a4      	asrs	r4, r4, #2
 80005ac:	2600      	movs	r6, #0
 80005ae:	42a6      	cmp	r6, r4
 80005b0:	d105      	bne.n	80005be <__libc_init_array+0x2e>
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b8:	4798      	blx	r3
 80005ba:	3601      	adds	r6, #1
 80005bc:	e7ee      	b.n	800059c <__libc_init_array+0xc>
 80005be:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c2:	4798      	blx	r3
 80005c4:	3601      	adds	r6, #1
 80005c6:	e7f2      	b.n	80005ae <__libc_init_array+0x1e>
 80005c8:	08000ed0 	.word	0x08000ed0
 80005cc:	08000ed0 	.word	0x08000ed0
 80005d0:	08000ed0 	.word	0x08000ed0
 80005d4:	08000ed4 	.word	0x08000ed4

080005d8 <__retarget_lock_acquire_recursive>:
 80005d8:	4770      	bx	lr

080005da <__retarget_lock_release_recursive>:
 80005da:	4770      	bx	lr

080005dc <_free_r>:
 80005dc:	b538      	push	{r3, r4, r5, lr}
 80005de:	4605      	mov	r5, r0
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d041      	beq.n	8000668 <_free_r+0x8c>
 80005e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80005e8:	1f0c      	subs	r4, r1, #4
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bfb8      	it	lt
 80005ee:	18e4      	addlt	r4, r4, r3
 80005f0:	f000 f8e0 	bl	80007b4 <__malloc_lock>
 80005f4:	4a1d      	ldr	r2, [pc, #116]	@ (800066c <_free_r+0x90>)
 80005f6:	6813      	ldr	r3, [r2, #0]
 80005f8:	b933      	cbnz	r3, 8000608 <_free_r+0x2c>
 80005fa:	6063      	str	r3, [r4, #4]
 80005fc:	6014      	str	r4, [r2, #0]
 80005fe:	4628      	mov	r0, r5
 8000600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000604:	f000 b8dc 	b.w	80007c0 <__malloc_unlock>
 8000608:	42a3      	cmp	r3, r4
 800060a:	d908      	bls.n	800061e <_free_r+0x42>
 800060c:	6820      	ldr	r0, [r4, #0]
 800060e:	1821      	adds	r1, r4, r0
 8000610:	428b      	cmp	r3, r1
 8000612:	bf01      	itttt	eq
 8000614:	6819      	ldreq	r1, [r3, #0]
 8000616:	685b      	ldreq	r3, [r3, #4]
 8000618:	1809      	addeq	r1, r1, r0
 800061a:	6021      	streq	r1, [r4, #0]
 800061c:	e7ed      	b.n	80005fa <_free_r+0x1e>
 800061e:	461a      	mov	r2, r3
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	b10b      	cbz	r3, 8000628 <_free_r+0x4c>
 8000624:	42a3      	cmp	r3, r4
 8000626:	d9fa      	bls.n	800061e <_free_r+0x42>
 8000628:	6811      	ldr	r1, [r2, #0]
 800062a:	1850      	adds	r0, r2, r1
 800062c:	42a0      	cmp	r0, r4
 800062e:	d10b      	bne.n	8000648 <_free_r+0x6c>
 8000630:	6820      	ldr	r0, [r4, #0]
 8000632:	4401      	add	r1, r0
 8000634:	1850      	adds	r0, r2, r1
 8000636:	4283      	cmp	r3, r0
 8000638:	6011      	str	r1, [r2, #0]
 800063a:	d1e0      	bne.n	80005fe <_free_r+0x22>
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	6053      	str	r3, [r2, #4]
 8000642:	4408      	add	r0, r1
 8000644:	6010      	str	r0, [r2, #0]
 8000646:	e7da      	b.n	80005fe <_free_r+0x22>
 8000648:	d902      	bls.n	8000650 <_free_r+0x74>
 800064a:	230c      	movs	r3, #12
 800064c:	602b      	str	r3, [r5, #0]
 800064e:	e7d6      	b.n	80005fe <_free_r+0x22>
 8000650:	6820      	ldr	r0, [r4, #0]
 8000652:	1821      	adds	r1, r4, r0
 8000654:	428b      	cmp	r3, r1
 8000656:	bf04      	itt	eq
 8000658:	6819      	ldreq	r1, [r3, #0]
 800065a:	685b      	ldreq	r3, [r3, #4]
 800065c:	6063      	str	r3, [r4, #4]
 800065e:	bf04      	itt	eq
 8000660:	1809      	addeq	r1, r1, r0
 8000662:	6021      	streq	r1, [r4, #0]
 8000664:	6054      	str	r4, [r2, #4]
 8000666:	e7ca      	b.n	80005fe <_free_r+0x22>
 8000668:	bd38      	pop	{r3, r4, r5, pc}
 800066a:	bf00      	nop
 800066c:	200001b8 	.word	0x200001b8

08000670 <sbrk_aligned>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	4e0f      	ldr	r6, [pc, #60]	@ (80006b0 <sbrk_aligned+0x40>)
 8000674:	460c      	mov	r4, r1
 8000676:	6831      	ldr	r1, [r6, #0]
 8000678:	4605      	mov	r5, r0
 800067a:	b911      	cbnz	r1, 8000682 <sbrk_aligned+0x12>
 800067c:	f000 fba4 	bl	8000dc8 <_sbrk_r>
 8000680:	6030      	str	r0, [r6, #0]
 8000682:	4621      	mov	r1, r4
 8000684:	4628      	mov	r0, r5
 8000686:	f000 fb9f 	bl	8000dc8 <_sbrk_r>
 800068a:	1c43      	adds	r3, r0, #1
 800068c:	d103      	bne.n	8000696 <sbrk_aligned+0x26>
 800068e:	f04f 34ff 	mov.w	r4, #4294967295
 8000692:	4620      	mov	r0, r4
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	1cc4      	adds	r4, r0, #3
 8000698:	f024 0403 	bic.w	r4, r4, #3
 800069c:	42a0      	cmp	r0, r4
 800069e:	d0f8      	beq.n	8000692 <sbrk_aligned+0x22>
 80006a0:	1a21      	subs	r1, r4, r0
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 fb90 	bl	8000dc8 <_sbrk_r>
 80006a8:	3001      	adds	r0, #1
 80006aa:	d1f2      	bne.n	8000692 <sbrk_aligned+0x22>
 80006ac:	e7ef      	b.n	800068e <sbrk_aligned+0x1e>
 80006ae:	bf00      	nop
 80006b0:	200001b4 	.word	0x200001b4

080006b4 <_malloc_r>:
 80006b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006b8:	1ccd      	adds	r5, r1, #3
 80006ba:	f025 0503 	bic.w	r5, r5, #3
 80006be:	3508      	adds	r5, #8
 80006c0:	2d0c      	cmp	r5, #12
 80006c2:	bf38      	it	cc
 80006c4:	250c      	movcc	r5, #12
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	4606      	mov	r6, r0
 80006ca:	db01      	blt.n	80006d0 <_malloc_r+0x1c>
 80006cc:	42a9      	cmp	r1, r5
 80006ce:	d904      	bls.n	80006da <_malloc_r+0x26>
 80006d0:	230c      	movs	r3, #12
 80006d2:	6033      	str	r3, [r6, #0]
 80006d4:	2000      	movs	r0, #0
 80006d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80007b0 <_malloc_r+0xfc>
 80006de:	f000 f869 	bl	80007b4 <__malloc_lock>
 80006e2:	f8d8 3000 	ldr.w	r3, [r8]
 80006e6:	461c      	mov	r4, r3
 80006e8:	bb44      	cbnz	r4, 800073c <_malloc_r+0x88>
 80006ea:	4629      	mov	r1, r5
 80006ec:	4630      	mov	r0, r6
 80006ee:	f7ff ffbf 	bl	8000670 <sbrk_aligned>
 80006f2:	1c43      	adds	r3, r0, #1
 80006f4:	4604      	mov	r4, r0
 80006f6:	d158      	bne.n	80007aa <_malloc_r+0xf6>
 80006f8:	f8d8 4000 	ldr.w	r4, [r8]
 80006fc:	4627      	mov	r7, r4
 80006fe:	2f00      	cmp	r7, #0
 8000700:	d143      	bne.n	800078a <_malloc_r+0xd6>
 8000702:	2c00      	cmp	r4, #0
 8000704:	d04b      	beq.n	800079e <_malloc_r+0xea>
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	4639      	mov	r1, r7
 800070a:	4630      	mov	r0, r6
 800070c:	eb04 0903 	add.w	r9, r4, r3
 8000710:	f000 fb5a 	bl	8000dc8 <_sbrk_r>
 8000714:	4581      	cmp	r9, r0
 8000716:	d142      	bne.n	800079e <_malloc_r+0xea>
 8000718:	6821      	ldr	r1, [r4, #0]
 800071a:	1a6d      	subs	r5, r5, r1
 800071c:	4629      	mov	r1, r5
 800071e:	4630      	mov	r0, r6
 8000720:	f7ff ffa6 	bl	8000670 <sbrk_aligned>
 8000724:	3001      	adds	r0, #1
 8000726:	d03a      	beq.n	800079e <_malloc_r+0xea>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	442b      	add	r3, r5
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	f8d8 3000 	ldr.w	r3, [r8]
 8000732:	685a      	ldr	r2, [r3, #4]
 8000734:	bb62      	cbnz	r2, 8000790 <_malloc_r+0xdc>
 8000736:	f8c8 7000 	str.w	r7, [r8]
 800073a:	e00f      	b.n	800075c <_malloc_r+0xa8>
 800073c:	6822      	ldr	r2, [r4, #0]
 800073e:	1b52      	subs	r2, r2, r5
 8000740:	d420      	bmi.n	8000784 <_malloc_r+0xd0>
 8000742:	2a0b      	cmp	r2, #11
 8000744:	d917      	bls.n	8000776 <_malloc_r+0xc2>
 8000746:	1961      	adds	r1, r4, r5
 8000748:	42a3      	cmp	r3, r4
 800074a:	6025      	str	r5, [r4, #0]
 800074c:	bf18      	it	ne
 800074e:	6059      	strne	r1, [r3, #4]
 8000750:	6863      	ldr	r3, [r4, #4]
 8000752:	bf08      	it	eq
 8000754:	f8c8 1000 	streq.w	r1, [r8]
 8000758:	5162      	str	r2, [r4, r5]
 800075a:	604b      	str	r3, [r1, #4]
 800075c:	4630      	mov	r0, r6
 800075e:	f000 f82f 	bl	80007c0 <__malloc_unlock>
 8000762:	f104 000b 	add.w	r0, r4, #11
 8000766:	1d23      	adds	r3, r4, #4
 8000768:	f020 0007 	bic.w	r0, r0, #7
 800076c:	1ac2      	subs	r2, r0, r3
 800076e:	bf1c      	itt	ne
 8000770:	1a1b      	subne	r3, r3, r0
 8000772:	50a3      	strne	r3, [r4, r2]
 8000774:	e7af      	b.n	80006d6 <_malloc_r+0x22>
 8000776:	6862      	ldr	r2, [r4, #4]
 8000778:	42a3      	cmp	r3, r4
 800077a:	bf0c      	ite	eq
 800077c:	f8c8 2000 	streq.w	r2, [r8]
 8000780:	605a      	strne	r2, [r3, #4]
 8000782:	e7eb      	b.n	800075c <_malloc_r+0xa8>
 8000784:	4623      	mov	r3, r4
 8000786:	6864      	ldr	r4, [r4, #4]
 8000788:	e7ae      	b.n	80006e8 <_malloc_r+0x34>
 800078a:	463c      	mov	r4, r7
 800078c:	687f      	ldr	r7, [r7, #4]
 800078e:	e7b6      	b.n	80006fe <_malloc_r+0x4a>
 8000790:	461a      	mov	r2, r3
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	42a3      	cmp	r3, r4
 8000796:	d1fb      	bne.n	8000790 <_malloc_r+0xdc>
 8000798:	2300      	movs	r3, #0
 800079a:	6053      	str	r3, [r2, #4]
 800079c:	e7de      	b.n	800075c <_malloc_r+0xa8>
 800079e:	230c      	movs	r3, #12
 80007a0:	6033      	str	r3, [r6, #0]
 80007a2:	4630      	mov	r0, r6
 80007a4:	f000 f80c 	bl	80007c0 <__malloc_unlock>
 80007a8:	e794      	b.n	80006d4 <_malloc_r+0x20>
 80007aa:	6005      	str	r5, [r0, #0]
 80007ac:	e7d6      	b.n	800075c <_malloc_r+0xa8>
 80007ae:	bf00      	nop
 80007b0:	200001b8 	.word	0x200001b8

080007b4 <__malloc_lock>:
 80007b4:	4801      	ldr	r0, [pc, #4]	@ (80007bc <__malloc_lock+0x8>)
 80007b6:	f7ff bf0f 	b.w	80005d8 <__retarget_lock_acquire_recursive>
 80007ba:	bf00      	nop
 80007bc:	200001b0 	.word	0x200001b0

080007c0 <__malloc_unlock>:
 80007c0:	4801      	ldr	r0, [pc, #4]	@ (80007c8 <__malloc_unlock+0x8>)
 80007c2:	f7ff bf0a 	b.w	80005da <__retarget_lock_release_recursive>
 80007c6:	bf00      	nop
 80007c8:	200001b0 	.word	0x200001b0

080007cc <__ssputs_r>:
 80007cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d0:	688e      	ldr	r6, [r1, #8]
 80007d2:	461f      	mov	r7, r3
 80007d4:	42be      	cmp	r6, r7
 80007d6:	680b      	ldr	r3, [r1, #0]
 80007d8:	4682      	mov	sl, r0
 80007da:	460c      	mov	r4, r1
 80007dc:	4690      	mov	r8, r2
 80007de:	d82d      	bhi.n	800083c <__ssputs_r+0x70>
 80007e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80007e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80007e8:	d026      	beq.n	8000838 <__ssputs_r+0x6c>
 80007ea:	6965      	ldr	r5, [r4, #20]
 80007ec:	6909      	ldr	r1, [r1, #16]
 80007ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007f2:	eba3 0901 	sub.w	r9, r3, r1
 80007f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80007fa:	1c7b      	adds	r3, r7, #1
 80007fc:	444b      	add	r3, r9
 80007fe:	106d      	asrs	r5, r5, #1
 8000800:	429d      	cmp	r5, r3
 8000802:	bf38      	it	cc
 8000804:	461d      	movcc	r5, r3
 8000806:	0553      	lsls	r3, r2, #21
 8000808:	d527      	bpl.n	800085a <__ssputs_r+0x8e>
 800080a:	4629      	mov	r1, r5
 800080c:	f7ff ff52 	bl	80006b4 <_malloc_r>
 8000810:	4606      	mov	r6, r0
 8000812:	b360      	cbz	r0, 800086e <__ssputs_r+0xa2>
 8000814:	6921      	ldr	r1, [r4, #16]
 8000816:	464a      	mov	r2, r9
 8000818:	f000 fae6 	bl	8000de8 <memcpy>
 800081c:	89a3      	ldrh	r3, [r4, #12]
 800081e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000826:	81a3      	strh	r3, [r4, #12]
 8000828:	6126      	str	r6, [r4, #16]
 800082a:	6165      	str	r5, [r4, #20]
 800082c:	444e      	add	r6, r9
 800082e:	eba5 0509 	sub.w	r5, r5, r9
 8000832:	6026      	str	r6, [r4, #0]
 8000834:	60a5      	str	r5, [r4, #8]
 8000836:	463e      	mov	r6, r7
 8000838:	42be      	cmp	r6, r7
 800083a:	d900      	bls.n	800083e <__ssputs_r+0x72>
 800083c:	463e      	mov	r6, r7
 800083e:	6820      	ldr	r0, [r4, #0]
 8000840:	4632      	mov	r2, r6
 8000842:	4641      	mov	r1, r8
 8000844:	f000 faa6 	bl	8000d94 <memmove>
 8000848:	68a3      	ldr	r3, [r4, #8]
 800084a:	1b9b      	subs	r3, r3, r6
 800084c:	60a3      	str	r3, [r4, #8]
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	4433      	add	r3, r6
 8000852:	6023      	str	r3, [r4, #0]
 8000854:	2000      	movs	r0, #0
 8000856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085a:	462a      	mov	r2, r5
 800085c:	f000 fad2 	bl	8000e04 <_realloc_r>
 8000860:	4606      	mov	r6, r0
 8000862:	2800      	cmp	r0, #0
 8000864:	d1e0      	bne.n	8000828 <__ssputs_r+0x5c>
 8000866:	6921      	ldr	r1, [r4, #16]
 8000868:	4650      	mov	r0, sl
 800086a:	f7ff feb7 	bl	80005dc <_free_r>
 800086e:	230c      	movs	r3, #12
 8000870:	f8ca 3000 	str.w	r3, [sl]
 8000874:	89a3      	ldrh	r3, [r4, #12]
 8000876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800087a:	81a3      	strh	r3, [r4, #12]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	e7e9      	b.n	8000856 <__ssputs_r+0x8a>
	...

08000884 <_svfiprintf_r>:
 8000884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000888:	4698      	mov	r8, r3
 800088a:	898b      	ldrh	r3, [r1, #12]
 800088c:	061b      	lsls	r3, r3, #24
 800088e:	b09d      	sub	sp, #116	@ 0x74
 8000890:	4607      	mov	r7, r0
 8000892:	460d      	mov	r5, r1
 8000894:	4614      	mov	r4, r2
 8000896:	d510      	bpl.n	80008ba <_svfiprintf_r+0x36>
 8000898:	690b      	ldr	r3, [r1, #16]
 800089a:	b973      	cbnz	r3, 80008ba <_svfiprintf_r+0x36>
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	f7ff ff09 	bl	80006b4 <_malloc_r>
 80008a2:	6028      	str	r0, [r5, #0]
 80008a4:	6128      	str	r0, [r5, #16]
 80008a6:	b930      	cbnz	r0, 80008b6 <_svfiprintf_r+0x32>
 80008a8:	230c      	movs	r3, #12
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	b01d      	add	sp, #116	@ 0x74
 80008b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008b6:	2340      	movs	r3, #64	@ 0x40
 80008b8:	616b      	str	r3, [r5, #20]
 80008ba:	2300      	movs	r3, #0
 80008bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80008be:	2320      	movs	r3, #32
 80008c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80008c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80008c8:	2330      	movs	r3, #48	@ 0x30
 80008ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000a68 <_svfiprintf_r+0x1e4>
 80008ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80008d2:	f04f 0901 	mov.w	r9, #1
 80008d6:	4623      	mov	r3, r4
 80008d8:	469a      	mov	sl, r3
 80008da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008de:	b10a      	cbz	r2, 80008e4 <_svfiprintf_r+0x60>
 80008e0:	2a25      	cmp	r2, #37	@ 0x25
 80008e2:	d1f9      	bne.n	80008d8 <_svfiprintf_r+0x54>
 80008e4:	ebba 0b04 	subs.w	fp, sl, r4
 80008e8:	d00b      	beq.n	8000902 <_svfiprintf_r+0x7e>
 80008ea:	465b      	mov	r3, fp
 80008ec:	4622      	mov	r2, r4
 80008ee:	4629      	mov	r1, r5
 80008f0:	4638      	mov	r0, r7
 80008f2:	f7ff ff6b 	bl	80007cc <__ssputs_r>
 80008f6:	3001      	adds	r0, #1
 80008f8:	f000 80a7 	beq.w	8000a4a <_svfiprintf_r+0x1c6>
 80008fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80008fe:	445a      	add	r2, fp
 8000900:	9209      	str	r2, [sp, #36]	@ 0x24
 8000902:	f89a 3000 	ldrb.w	r3, [sl]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f000 809f 	beq.w	8000a4a <_svfiprintf_r+0x1c6>
 800090c:	2300      	movs	r3, #0
 800090e:	f04f 32ff 	mov.w	r2, #4294967295
 8000912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000916:	f10a 0a01 	add.w	sl, sl, #1
 800091a:	9304      	str	r3, [sp, #16]
 800091c:	9307      	str	r3, [sp, #28]
 800091e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000922:	931a      	str	r3, [sp, #104]	@ 0x68
 8000924:	4654      	mov	r4, sl
 8000926:	2205      	movs	r2, #5
 8000928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800092c:	484e      	ldr	r0, [pc, #312]	@ (8000a68 <_svfiprintf_r+0x1e4>)
 800092e:	f7ff fc5f 	bl	80001f0 <memchr>
 8000932:	9a04      	ldr	r2, [sp, #16]
 8000934:	b9d8      	cbnz	r0, 800096e <_svfiprintf_r+0xea>
 8000936:	06d0      	lsls	r0, r2, #27
 8000938:	bf44      	itt	mi
 800093a:	2320      	movmi	r3, #32
 800093c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000940:	0711      	lsls	r1, r2, #28
 8000942:	bf44      	itt	mi
 8000944:	232b      	movmi	r3, #43	@ 0x2b
 8000946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800094a:	f89a 3000 	ldrb.w	r3, [sl]
 800094e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000950:	d015      	beq.n	800097e <_svfiprintf_r+0xfa>
 8000952:	9a07      	ldr	r2, [sp, #28]
 8000954:	4654      	mov	r4, sl
 8000956:	2000      	movs	r0, #0
 8000958:	f04f 0c0a 	mov.w	ip, #10
 800095c:	4621      	mov	r1, r4
 800095e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000962:	3b30      	subs	r3, #48	@ 0x30
 8000964:	2b09      	cmp	r3, #9
 8000966:	d94b      	bls.n	8000a00 <_svfiprintf_r+0x17c>
 8000968:	b1b0      	cbz	r0, 8000998 <_svfiprintf_r+0x114>
 800096a:	9207      	str	r2, [sp, #28]
 800096c:	e014      	b.n	8000998 <_svfiprintf_r+0x114>
 800096e:	eba0 0308 	sub.w	r3, r0, r8
 8000972:	fa09 f303 	lsl.w	r3, r9, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	46a2      	mov	sl, r4
 800097c:	e7d2      	b.n	8000924 <_svfiprintf_r+0xa0>
 800097e:	9b03      	ldr	r3, [sp, #12]
 8000980:	1d19      	adds	r1, r3, #4
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	9103      	str	r1, [sp, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	bfbb      	ittet	lt
 800098a:	425b      	neglt	r3, r3
 800098c:	f042 0202 	orrlt.w	r2, r2, #2
 8000990:	9307      	strge	r3, [sp, #28]
 8000992:	9307      	strlt	r3, [sp, #28]
 8000994:	bfb8      	it	lt
 8000996:	9204      	strlt	r2, [sp, #16]
 8000998:	7823      	ldrb	r3, [r4, #0]
 800099a:	2b2e      	cmp	r3, #46	@ 0x2e
 800099c:	d10a      	bne.n	80009b4 <_svfiprintf_r+0x130>
 800099e:	7863      	ldrb	r3, [r4, #1]
 80009a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80009a2:	d132      	bne.n	8000a0a <_svfiprintf_r+0x186>
 80009a4:	9b03      	ldr	r3, [sp, #12]
 80009a6:	1d1a      	adds	r2, r3, #4
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	9203      	str	r2, [sp, #12]
 80009ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009b0:	3402      	adds	r4, #2
 80009b2:	9305      	str	r3, [sp, #20]
 80009b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000a78 <_svfiprintf_r+0x1f4>
 80009b8:	7821      	ldrb	r1, [r4, #0]
 80009ba:	2203      	movs	r2, #3
 80009bc:	4650      	mov	r0, sl
 80009be:	f7ff fc17 	bl	80001f0 <memchr>
 80009c2:	b138      	cbz	r0, 80009d4 <_svfiprintf_r+0x150>
 80009c4:	9b04      	ldr	r3, [sp, #16]
 80009c6:	eba0 000a 	sub.w	r0, r0, sl
 80009ca:	2240      	movs	r2, #64	@ 0x40
 80009cc:	4082      	lsls	r2, r0
 80009ce:	4313      	orrs	r3, r2
 80009d0:	3401      	adds	r4, #1
 80009d2:	9304      	str	r3, [sp, #16]
 80009d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009d8:	4824      	ldr	r0, [pc, #144]	@ (8000a6c <_svfiprintf_r+0x1e8>)
 80009da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80009de:	2206      	movs	r2, #6
 80009e0:	f7ff fc06 	bl	80001f0 <memchr>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d036      	beq.n	8000a56 <_svfiprintf_r+0x1d2>
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <_svfiprintf_r+0x1ec>)
 80009ea:	bb1b      	cbnz	r3, 8000a34 <_svfiprintf_r+0x1b0>
 80009ec:	9b03      	ldr	r3, [sp, #12]
 80009ee:	3307      	adds	r3, #7
 80009f0:	f023 0307 	bic.w	r3, r3, #7
 80009f4:	3308      	adds	r3, #8
 80009f6:	9303      	str	r3, [sp, #12]
 80009f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80009fa:	4433      	add	r3, r6
 80009fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80009fe:	e76a      	b.n	80008d6 <_svfiprintf_r+0x52>
 8000a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a04:	460c      	mov	r4, r1
 8000a06:	2001      	movs	r0, #1
 8000a08:	e7a8      	b.n	800095c <_svfiprintf_r+0xd8>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	3401      	adds	r4, #1
 8000a0e:	9305      	str	r3, [sp, #20]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 0c0a 	mov.w	ip, #10
 8000a16:	4620      	mov	r0, r4
 8000a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a1c:	3a30      	subs	r2, #48	@ 0x30
 8000a1e:	2a09      	cmp	r2, #9
 8000a20:	d903      	bls.n	8000a2a <_svfiprintf_r+0x1a6>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0c6      	beq.n	80009b4 <_svfiprintf_r+0x130>
 8000a26:	9105      	str	r1, [sp, #20]
 8000a28:	e7c4      	b.n	80009b4 <_svfiprintf_r+0x130>
 8000a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a2e:	4604      	mov	r4, r0
 8000a30:	2301      	movs	r3, #1
 8000a32:	e7f0      	b.n	8000a16 <_svfiprintf_r+0x192>
 8000a34:	ab03      	add	r3, sp, #12
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	462a      	mov	r2, r5
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <_svfiprintf_r+0x1f0>)
 8000a3c:	a904      	add	r1, sp, #16
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f3af 8000 	nop.w
 8000a44:	1c42      	adds	r2, r0, #1
 8000a46:	4606      	mov	r6, r0
 8000a48:	d1d6      	bne.n	80009f8 <_svfiprintf_r+0x174>
 8000a4a:	89ab      	ldrh	r3, [r5, #12]
 8000a4c:	065b      	lsls	r3, r3, #25
 8000a4e:	f53f af2d 	bmi.w	80008ac <_svfiprintf_r+0x28>
 8000a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a54:	e72c      	b.n	80008b0 <_svfiprintf_r+0x2c>
 8000a56:	ab03      	add	r3, sp, #12
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	462a      	mov	r2, r5
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <_svfiprintf_r+0x1f0>)
 8000a5e:	a904      	add	r1, sp, #16
 8000a60:	4638      	mov	r0, r7
 8000a62:	f000 f879 	bl	8000b58 <_printf_i>
 8000a66:	e7ed      	b.n	8000a44 <_svfiprintf_r+0x1c0>
 8000a68:	08000e94 	.word	0x08000e94
 8000a6c:	08000e9e 	.word	0x08000e9e
 8000a70:	00000000 	.word	0x00000000
 8000a74:	080007cd 	.word	0x080007cd
 8000a78:	08000e9a 	.word	0x08000e9a

08000a7c <_printf_common>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	4616      	mov	r6, r2
 8000a82:	4698      	mov	r8, r3
 8000a84:	688a      	ldr	r2, [r1, #8]
 8000a86:	690b      	ldr	r3, [r1, #16]
 8000a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	bfb8      	it	lt
 8000a90:	4613      	movlt	r3, r2
 8000a92:	6033      	str	r3, [r6, #0]
 8000a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000a98:	4607      	mov	r7, r0
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	b10a      	cbz	r2, 8000aa2 <_printf_common+0x26>
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	6033      	str	r3, [r6, #0]
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	0699      	lsls	r1, r3, #26
 8000aa6:	bf42      	ittt	mi
 8000aa8:	6833      	ldrmi	r3, [r6, #0]
 8000aaa:	3302      	addmi	r3, #2
 8000aac:	6033      	strmi	r3, [r6, #0]
 8000aae:	6825      	ldr	r5, [r4, #0]
 8000ab0:	f015 0506 	ands.w	r5, r5, #6
 8000ab4:	d106      	bne.n	8000ac4 <_printf_common+0x48>
 8000ab6:	f104 0a19 	add.w	sl, r4, #25
 8000aba:	68e3      	ldr	r3, [r4, #12]
 8000abc:	6832      	ldr	r2, [r6, #0]
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	42ab      	cmp	r3, r5
 8000ac2:	dc26      	bgt.n	8000b12 <_printf_common+0x96>
 8000ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ac8:	6822      	ldr	r2, [r4, #0]
 8000aca:	3b00      	subs	r3, #0
 8000acc:	bf18      	it	ne
 8000ace:	2301      	movne	r3, #1
 8000ad0:	0692      	lsls	r2, r2, #26
 8000ad2:	d42b      	bmi.n	8000b2c <_printf_common+0xb0>
 8000ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ad8:	4641      	mov	r1, r8
 8000ada:	4638      	mov	r0, r7
 8000adc:	47c8      	blx	r9
 8000ade:	3001      	adds	r0, #1
 8000ae0:	d01e      	beq.n	8000b20 <_printf_common+0xa4>
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	6922      	ldr	r2, [r4, #16]
 8000ae6:	f003 0306 	and.w	r3, r3, #6
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf02      	ittt	eq
 8000aee:	68e5      	ldreq	r5, [r4, #12]
 8000af0:	6833      	ldreq	r3, [r6, #0]
 8000af2:	1aed      	subeq	r5, r5, r3
 8000af4:	68a3      	ldr	r3, [r4, #8]
 8000af6:	bf0c      	ite	eq
 8000af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000afc:	2500      	movne	r5, #0
 8000afe:	4293      	cmp	r3, r2
 8000b00:	bfc4      	itt	gt
 8000b02:	1a9b      	subgt	r3, r3, r2
 8000b04:	18ed      	addgt	r5, r5, r3
 8000b06:	2600      	movs	r6, #0
 8000b08:	341a      	adds	r4, #26
 8000b0a:	42b5      	cmp	r5, r6
 8000b0c:	d11a      	bne.n	8000b44 <_printf_common+0xc8>
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e008      	b.n	8000b24 <_printf_common+0xa8>
 8000b12:	2301      	movs	r3, #1
 8000b14:	4652      	mov	r2, sl
 8000b16:	4641      	mov	r1, r8
 8000b18:	4638      	mov	r0, r7
 8000b1a:	47c8      	blx	r9
 8000b1c:	3001      	adds	r0, #1
 8000b1e:	d103      	bne.n	8000b28 <_printf_common+0xac>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b28:	3501      	adds	r5, #1
 8000b2a:	e7c6      	b.n	8000aba <_printf_common+0x3e>
 8000b2c:	18e1      	adds	r1, r4, r3
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	2030      	movs	r0, #48	@ 0x30
 8000b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000b36:	4422      	add	r2, r4
 8000b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000b40:	3302      	adds	r3, #2
 8000b42:	e7c7      	b.n	8000ad4 <_printf_common+0x58>
 8000b44:	2301      	movs	r3, #1
 8000b46:	4622      	mov	r2, r4
 8000b48:	4641      	mov	r1, r8
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	47c8      	blx	r9
 8000b4e:	3001      	adds	r0, #1
 8000b50:	d0e6      	beq.n	8000b20 <_printf_common+0xa4>
 8000b52:	3601      	adds	r6, #1
 8000b54:	e7d9      	b.n	8000b0a <_printf_common+0x8e>
	...

08000b58 <_printf_i>:
 8000b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	7e0f      	ldrb	r7, [r1, #24]
 8000b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000b60:	2f78      	cmp	r7, #120	@ 0x78
 8000b62:	4691      	mov	r9, r2
 8000b64:	4680      	mov	r8, r0
 8000b66:	460c      	mov	r4, r1
 8000b68:	469a      	mov	sl, r3
 8000b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000b6e:	d807      	bhi.n	8000b80 <_printf_i+0x28>
 8000b70:	2f62      	cmp	r7, #98	@ 0x62
 8000b72:	d80a      	bhi.n	8000b8a <_printf_i+0x32>
 8000b74:	2f00      	cmp	r7, #0
 8000b76:	f000 80d1 	beq.w	8000d1c <_printf_i+0x1c4>
 8000b7a:	2f58      	cmp	r7, #88	@ 0x58
 8000b7c:	f000 80b8 	beq.w	8000cf0 <_printf_i+0x198>
 8000b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000b88:	e03a      	b.n	8000c00 <_printf_i+0xa8>
 8000b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000b8e:	2b15      	cmp	r3, #21
 8000b90:	d8f6      	bhi.n	8000b80 <_printf_i+0x28>
 8000b92:	a101      	add	r1, pc, #4	@ (adr r1, 8000b98 <_printf_i+0x40>)
 8000b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000b98:	08000bf1 	.word	0x08000bf1
 8000b9c:	08000c05 	.word	0x08000c05
 8000ba0:	08000b81 	.word	0x08000b81
 8000ba4:	08000b81 	.word	0x08000b81
 8000ba8:	08000b81 	.word	0x08000b81
 8000bac:	08000b81 	.word	0x08000b81
 8000bb0:	08000c05 	.word	0x08000c05
 8000bb4:	08000b81 	.word	0x08000b81
 8000bb8:	08000b81 	.word	0x08000b81
 8000bbc:	08000b81 	.word	0x08000b81
 8000bc0:	08000b81 	.word	0x08000b81
 8000bc4:	08000d03 	.word	0x08000d03
 8000bc8:	08000c2f 	.word	0x08000c2f
 8000bcc:	08000cbd 	.word	0x08000cbd
 8000bd0:	08000b81 	.word	0x08000b81
 8000bd4:	08000b81 	.word	0x08000b81
 8000bd8:	08000d25 	.word	0x08000d25
 8000bdc:	08000b81 	.word	0x08000b81
 8000be0:	08000c2f 	.word	0x08000c2f
 8000be4:	08000b81 	.word	0x08000b81
 8000be8:	08000b81 	.word	0x08000b81
 8000bec:	08000cc5 	.word	0x08000cc5
 8000bf0:	6833      	ldr	r3, [r6, #0]
 8000bf2:	1d1a      	adds	r2, r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6032      	str	r2, [r6, #0]
 8000bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000c00:	2301      	movs	r3, #1
 8000c02:	e09c      	b.n	8000d3e <_printf_i+0x1e6>
 8000c04:	6833      	ldr	r3, [r6, #0]
 8000c06:	6820      	ldr	r0, [r4, #0]
 8000c08:	1d19      	adds	r1, r3, #4
 8000c0a:	6031      	str	r1, [r6, #0]
 8000c0c:	0606      	lsls	r6, r0, #24
 8000c0e:	d501      	bpl.n	8000c14 <_printf_i+0xbc>
 8000c10:	681d      	ldr	r5, [r3, #0]
 8000c12:	e003      	b.n	8000c1c <_printf_i+0xc4>
 8000c14:	0645      	lsls	r5, r0, #25
 8000c16:	d5fb      	bpl.n	8000c10 <_printf_i+0xb8>
 8000c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	da03      	bge.n	8000c28 <_printf_i+0xd0>
 8000c20:	232d      	movs	r3, #45	@ 0x2d
 8000c22:	426d      	negs	r5, r5
 8000c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000c28:	4858      	ldr	r0, [pc, #352]	@ (8000d8c <_printf_i+0x234>)
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	e011      	b.n	8000c52 <_printf_i+0xfa>
 8000c2e:	6821      	ldr	r1, [r4, #0]
 8000c30:	6833      	ldr	r3, [r6, #0]
 8000c32:	0608      	lsls	r0, r1, #24
 8000c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8000c38:	d402      	bmi.n	8000c40 <_printf_i+0xe8>
 8000c3a:	0649      	lsls	r1, r1, #25
 8000c3c:	bf48      	it	mi
 8000c3e:	b2ad      	uxthmi	r5, r5
 8000c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8000c42:	4852      	ldr	r0, [pc, #328]	@ (8000d8c <_printf_i+0x234>)
 8000c44:	6033      	str	r3, [r6, #0]
 8000c46:	bf14      	ite	ne
 8000c48:	230a      	movne	r3, #10
 8000c4a:	2308      	moveq	r3, #8
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000c52:	6866      	ldr	r6, [r4, #4]
 8000c54:	60a6      	str	r6, [r4, #8]
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	db05      	blt.n	8000c66 <_printf_i+0x10e>
 8000c5a:	6821      	ldr	r1, [r4, #0]
 8000c5c:	432e      	orrs	r6, r5
 8000c5e:	f021 0104 	bic.w	r1, r1, #4
 8000c62:	6021      	str	r1, [r4, #0]
 8000c64:	d04b      	beq.n	8000cfe <_printf_i+0x1a6>
 8000c66:	4616      	mov	r6, r2
 8000c68:	fbb5 f1f3 	udiv	r1, r5, r3
 8000c6c:	fb03 5711 	mls	r7, r3, r1, r5
 8000c70:	5dc7      	ldrb	r7, [r0, r7]
 8000c72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000c76:	462f      	mov	r7, r5
 8000c78:	42bb      	cmp	r3, r7
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	d9f4      	bls.n	8000c68 <_printf_i+0x110>
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d10b      	bne.n	8000c9a <_printf_i+0x142>
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	07df      	lsls	r7, r3, #31
 8000c86:	d508      	bpl.n	8000c9a <_printf_i+0x142>
 8000c88:	6923      	ldr	r3, [r4, #16]
 8000c8a:	6861      	ldr	r1, [r4, #4]
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	bfde      	ittt	le
 8000c90:	2330      	movle	r3, #48	@ 0x30
 8000c92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000c96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000c9a:	1b92      	subs	r2, r2, r6
 8000c9c:	6122      	str	r2, [r4, #16]
 8000c9e:	f8cd a000 	str.w	sl, [sp]
 8000ca2:	464b      	mov	r3, r9
 8000ca4:	aa03      	add	r2, sp, #12
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	4640      	mov	r0, r8
 8000caa:	f7ff fee7 	bl	8000a7c <_printf_common>
 8000cae:	3001      	adds	r0, #1
 8000cb0:	d14a      	bne.n	8000d48 <_printf_i+0x1f0>
 8000cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb6:	b004      	add	sp, #16
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	6023      	str	r3, [r4, #0]
 8000cc4:	4832      	ldr	r0, [pc, #200]	@ (8000d90 <_printf_i+0x238>)
 8000cc6:	2778      	movs	r7, #120	@ 0x78
 8000cc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	6831      	ldr	r1, [r6, #0]
 8000cd0:	061f      	lsls	r7, r3, #24
 8000cd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8000cd6:	d402      	bmi.n	8000cde <_printf_i+0x186>
 8000cd8:	065f      	lsls	r7, r3, #25
 8000cda:	bf48      	it	mi
 8000cdc:	b2ad      	uxthmi	r5, r5
 8000cde:	6031      	str	r1, [r6, #0]
 8000ce0:	07d9      	lsls	r1, r3, #31
 8000ce2:	bf44      	itt	mi
 8000ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8000ce8:	6023      	strmi	r3, [r4, #0]
 8000cea:	b11d      	cbz	r5, 8000cf4 <_printf_i+0x19c>
 8000cec:	2310      	movs	r3, #16
 8000cee:	e7ad      	b.n	8000c4c <_printf_i+0xf4>
 8000cf0:	4826      	ldr	r0, [pc, #152]	@ (8000d8c <_printf_i+0x234>)
 8000cf2:	e7e9      	b.n	8000cc8 <_printf_i+0x170>
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	f023 0320 	bic.w	r3, r3, #32
 8000cfa:	6023      	str	r3, [r4, #0]
 8000cfc:	e7f6      	b.n	8000cec <_printf_i+0x194>
 8000cfe:	4616      	mov	r6, r2
 8000d00:	e7bd      	b.n	8000c7e <_printf_i+0x126>
 8000d02:	6833      	ldr	r3, [r6, #0]
 8000d04:	6825      	ldr	r5, [r4, #0]
 8000d06:	6961      	ldr	r1, [r4, #20]
 8000d08:	1d18      	adds	r0, r3, #4
 8000d0a:	6030      	str	r0, [r6, #0]
 8000d0c:	062e      	lsls	r6, r5, #24
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	d501      	bpl.n	8000d16 <_printf_i+0x1be>
 8000d12:	6019      	str	r1, [r3, #0]
 8000d14:	e002      	b.n	8000d1c <_printf_i+0x1c4>
 8000d16:	0668      	lsls	r0, r5, #25
 8000d18:	d5fb      	bpl.n	8000d12 <_printf_i+0x1ba>
 8000d1a:	8019      	strh	r1, [r3, #0]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6123      	str	r3, [r4, #16]
 8000d20:	4616      	mov	r6, r2
 8000d22:	e7bc      	b.n	8000c9e <_printf_i+0x146>
 8000d24:	6833      	ldr	r3, [r6, #0]
 8000d26:	1d1a      	adds	r2, r3, #4
 8000d28:	6032      	str	r2, [r6, #0]
 8000d2a:	681e      	ldr	r6, [r3, #0]
 8000d2c:	6862      	ldr	r2, [r4, #4]
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4630      	mov	r0, r6
 8000d32:	f7ff fa5d 	bl	80001f0 <memchr>
 8000d36:	b108      	cbz	r0, 8000d3c <_printf_i+0x1e4>
 8000d38:	1b80      	subs	r0, r0, r6
 8000d3a:	6060      	str	r0, [r4, #4]
 8000d3c:	6863      	ldr	r3, [r4, #4]
 8000d3e:	6123      	str	r3, [r4, #16]
 8000d40:	2300      	movs	r3, #0
 8000d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d46:	e7aa      	b.n	8000c9e <_printf_i+0x146>
 8000d48:	6923      	ldr	r3, [r4, #16]
 8000d4a:	4632      	mov	r2, r6
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	4640      	mov	r0, r8
 8000d50:	47d0      	blx	sl
 8000d52:	3001      	adds	r0, #1
 8000d54:	d0ad      	beq.n	8000cb2 <_printf_i+0x15a>
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	079b      	lsls	r3, r3, #30
 8000d5a:	d413      	bmi.n	8000d84 <_printf_i+0x22c>
 8000d5c:	68e0      	ldr	r0, [r4, #12]
 8000d5e:	9b03      	ldr	r3, [sp, #12]
 8000d60:	4298      	cmp	r0, r3
 8000d62:	bfb8      	it	lt
 8000d64:	4618      	movlt	r0, r3
 8000d66:	e7a6      	b.n	8000cb6 <_printf_i+0x15e>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4632      	mov	r2, r6
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	4640      	mov	r0, r8
 8000d70:	47d0      	blx	sl
 8000d72:	3001      	adds	r0, #1
 8000d74:	d09d      	beq.n	8000cb2 <_printf_i+0x15a>
 8000d76:	3501      	adds	r5, #1
 8000d78:	68e3      	ldr	r3, [r4, #12]
 8000d7a:	9903      	ldr	r1, [sp, #12]
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	42ab      	cmp	r3, r5
 8000d80:	dcf2      	bgt.n	8000d68 <_printf_i+0x210>
 8000d82:	e7eb      	b.n	8000d5c <_printf_i+0x204>
 8000d84:	2500      	movs	r5, #0
 8000d86:	f104 0619 	add.w	r6, r4, #25
 8000d8a:	e7f5      	b.n	8000d78 <_printf_i+0x220>
 8000d8c:	08000ea5 	.word	0x08000ea5
 8000d90:	08000eb6 	.word	0x08000eb6

08000d94 <memmove>:
 8000d94:	4288      	cmp	r0, r1
 8000d96:	b510      	push	{r4, lr}
 8000d98:	eb01 0402 	add.w	r4, r1, r2
 8000d9c:	d902      	bls.n	8000da4 <memmove+0x10>
 8000d9e:	4284      	cmp	r4, r0
 8000da0:	4623      	mov	r3, r4
 8000da2:	d807      	bhi.n	8000db4 <memmove+0x20>
 8000da4:	1e43      	subs	r3, r0, #1
 8000da6:	42a1      	cmp	r1, r4
 8000da8:	d008      	beq.n	8000dbc <memmove+0x28>
 8000daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000db2:	e7f8      	b.n	8000da6 <memmove+0x12>
 8000db4:	4402      	add	r2, r0
 8000db6:	4601      	mov	r1, r0
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d100      	bne.n	8000dbe <memmove+0x2a>
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000dc6:	e7f7      	b.n	8000db8 <memmove+0x24>

08000dc8 <_sbrk_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4d06      	ldr	r5, [pc, #24]	@ (8000de4 <_sbrk_r+0x1c>)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	602b      	str	r3, [r5, #0]
 8000dd4:	f7ff fb54 	bl	8000480 <_sbrk>
 8000dd8:	1c43      	adds	r3, r0, #1
 8000dda:	d102      	bne.n	8000de2 <_sbrk_r+0x1a>
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	b103      	cbz	r3, 8000de2 <_sbrk_r+0x1a>
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	200001ac 	.word	0x200001ac

08000de8 <memcpy>:
 8000de8:	440a      	add	r2, r1
 8000dea:	4291      	cmp	r1, r2
 8000dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df0:	d100      	bne.n	8000df4 <memcpy+0xc>
 8000df2:	4770      	bx	lr
 8000df4:	b510      	push	{r4, lr}
 8000df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000dfe:	4291      	cmp	r1, r2
 8000e00:	d1f9      	bne.n	8000df6 <memcpy+0xe>
 8000e02:	bd10      	pop	{r4, pc}

08000e04 <_realloc_r>:
 8000e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e08:	4607      	mov	r7, r0
 8000e0a:	4614      	mov	r4, r2
 8000e0c:	460d      	mov	r5, r1
 8000e0e:	b921      	cbnz	r1, 8000e1a <_realloc_r+0x16>
 8000e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e14:	4611      	mov	r1, r2
 8000e16:	f7ff bc4d 	b.w	80006b4 <_malloc_r>
 8000e1a:	b92a      	cbnz	r2, 8000e28 <_realloc_r+0x24>
 8000e1c:	f7ff fbde 	bl	80005dc <_free_r>
 8000e20:	4625      	mov	r5, r4
 8000e22:	4628      	mov	r0, r5
 8000e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e28:	f000 f81a 	bl	8000e60 <_malloc_usable_size_r>
 8000e2c:	4284      	cmp	r4, r0
 8000e2e:	4606      	mov	r6, r0
 8000e30:	d802      	bhi.n	8000e38 <_realloc_r+0x34>
 8000e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000e36:	d8f4      	bhi.n	8000e22 <_realloc_r+0x1e>
 8000e38:	4621      	mov	r1, r4
 8000e3a:	4638      	mov	r0, r7
 8000e3c:	f7ff fc3a 	bl	80006b4 <_malloc_r>
 8000e40:	4680      	mov	r8, r0
 8000e42:	b908      	cbnz	r0, 8000e48 <_realloc_r+0x44>
 8000e44:	4645      	mov	r5, r8
 8000e46:	e7ec      	b.n	8000e22 <_realloc_r+0x1e>
 8000e48:	42b4      	cmp	r4, r6
 8000e4a:	4622      	mov	r2, r4
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	bf28      	it	cs
 8000e50:	4632      	movcs	r2, r6
 8000e52:	f7ff ffc9 	bl	8000de8 <memcpy>
 8000e56:	4629      	mov	r1, r5
 8000e58:	4638      	mov	r0, r7
 8000e5a:	f7ff fbbf 	bl	80005dc <_free_r>
 8000e5e:	e7f1      	b.n	8000e44 <_realloc_r+0x40>

08000e60 <_malloc_usable_size_r>:
 8000e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e64:	1f18      	subs	r0, r3, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bfbc      	itt	lt
 8000e6a:	580b      	ldrlt	r3, [r1, r0]
 8000e6c:	18c0      	addlt	r0, r0, r3
 8000e6e:	4770      	bx	lr

08000e70 <_init>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr

08000e7c <_fini>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	bf00      	nop
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr
